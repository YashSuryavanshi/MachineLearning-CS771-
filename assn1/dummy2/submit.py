# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hlwN-KOVfLAP3iaY2Cy5k4DnRA0_P3U3
"""

import math
import numpy as np
from sklearn.model_selection import train_test_split
import sklearn
from sklearn.svm import LinearSVC
import pickle
import time
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import Lasso
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.linear_model import Ridge

def my_map(X_raw):
    # Transform X_raw into d using element-wise computation
    d = np.flip(2 * X_raw - 1, axis=1)

    # Compute X using cumulative product along the flipped axis
    X = np.cumprod(d, axis=1)

    # Create a mask for upper triangular part of X
    mask = np.triu(np.ones((32, 32), dtype=bool), k=1)

    # Compute pairwise products for upper triangular part
    pairs = X[:, :, np.newaxis] * X[:, np.newaxis, :]

    # Apply mask to keep only upper triangular part of each pairwise product
    pairs_masked = pairs[:, mask]

    # Concatenate original X with pairwise products
    X_new = np.concatenate([X, pairs_masked], axis=1)

    return X_new

def my_fit(X_raw, y):
    X = my_map(X_raw)  # Assuming my_map returns X and y, but we only need X here
    '''classifier = LogisticRegression(C=100,random_state=0)
    classifier.fit(X, y)
    w = classifier.coef_[0]  # Coefficients
    b = classifier.intercept_[0]  # Intercept'''
    lasso = Lasso(alpha=1.0)
    lasso.fit(X, y)
    w = lasso.sparse_coef_ # Coefficients
    b = lasso.intercept_  # Intercept

    return w,b